//special cases: INT_MAX,INT_MIN==>long long; if out of boundary, return 0
//"" , "+" ,"-" =>invalid, we also return 0; use a global variable to different the invalid and "0"
enum Status {kValid = 0, kInvalid};
int g_nStatus = kValid;
long long StrToIntCore(const char* digit, bool minus) {
    long long num = 0;
    while (*digit!='\0') {
        if (*digit >= '0' && *digit <= '9') {
            int flag = minus?-1:1;
            num = num * 10 + flag *(*digit-'0');
            //if out of boundary, output 0;
            if ((!minus && num > 0x7FFFFFFF) || (minus && num < (signed int) 0X80000000)) {
                num=0;
                break;
            }
            digit++;
        }
        else {
            num=0;
            break;
        }
    }
    if (*digit =='\0') {
        {
            g_nStatus = kValid;
        }
    }
    return num;
}


int StrToInt(const char* str) {
    g_nStatus = kInvalid;
    long long num = 0;
    if (str!=NULL && *str!='\0') {
        bool minus = false;
        if (*str=='+') {
            str++;
        }
        else if(*str=='-'){
            str++;
            minus = true;
        }
        if (*str!='\0') {
            num = StrToIntCore(str,minus);
        }
    }
    return (int) num;
}

void printMatrix(vector<vector<int> > &result) {
    for (int i = 0; i < result.size(); ++i) {
        for (int j = 0; j < result[i].size(); ++j) {
            cout << result[i][j]<<" ";
        }
        cout << endl;
    }
}
int main() {
    cout <<INT_MAX<<endl;
    char* str = "2147483647";
    int result  = StrToInt(str);
    if (g_nStatus == kInvalid) {
        cout << "Invalid"<<endl;
    }
    else {
        cout << result<<endl;
    }
    
