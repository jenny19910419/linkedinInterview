class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        vector<vector<int> > result;
        helper(root,1,result);
        return result;
    }
    
    void helper(TreeNode* root,int level,vector<vector<int> >& result) {
        if(root==NULL) 
            return;
            
        if(result.size() < level) {
            vector<int> tmp;
            result.push_back(tmp);
        }
        result[level-1].push_back(root->val);
        if(root->left)
            helper(root->left,level+1,result);
        if(root->right)
            helper(root->right,level+1,result);
        
    }
};


//Non-recursive version
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        vector<vector<int> > result;
        if(root==NULL)
            return result;
        
        vector<TreeNode *> cur, next;
        cur.push_back(root);
        while(!cur.empty()) {
            vector<int> tmp;
            for(int i = 0; i < cur.size();++i)
            {
                tmp.push_back(cur[i]->val);
                
                if(cur[i]->left)
                    next.push_back(cur[i]->left);
                if(cur[i]->right)
                    next.push_back(cur[i]->right);
            }
            result.push_back(tmp);
            cur = next;
            next.clear();
        }
        
        return result;
    }
};
