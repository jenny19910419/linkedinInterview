/**
 * Given two words as Strings, determine if they are isomorphic. Two words are called isomorphic
 * if the letters in one word can be remapped to get the second word. Remapping a letter means replacing all
 * occurrences of it with another letter while the ordering of the letters remains unchanged. No two letters
 * may map to the same letter, but a letter may map to itself.
 *
 * Example:
 *   given "foo", "app"; returns true
 *     we can map 'f' -> 'a' and 'o' -> 'p'
 *
 *   given "foo", "boa"; returns false
 *     we can map 'f' -> 'b', 'o' -> 'o', we can't map 'o' -> 'a'
 *
 *   given "bar", "foo"; returns false
 *     we can't map both 'a' and 'r' to 'o'
 *
 *   given "turtle", "tletur"; returns true
 *     we can map 't' -> 't', 'u' -> 'l', 'r' -> 'e', 'l' -> 'u', 'e' ->'r'
 *
 *   given "ab", "ca"; returns true
 *     we can map 'a' -> 'c', 'b' -> 'a'
 */
boolean checkIsomorphic(String s1, String s2) {
    int len1 = s1.length();
    int len2 = s2.length();
    if(len1!=len2) 
        return false;
    if(len1 == 1) 
        return true;
        
    //unordered_map<char,char> map1;
    //unordered_map<char,char> map2;
    unordered_map<char,char> map;
    for(int i = 0; i< len1;++i) {
        if(!map.containsKey(s1[i]) && !map.containsValue(s2[i]) {
            map[s1[i]] = s2[i];
        }
        if(!map.containsKey(s1[i])) 
            return false;
        if(!map[s1[i]] == s2[i]) {
            return false;
        }
     }
     return true;
    
    //string builder1;
    //string builder2;
    /*for(int i = 0; i < len1;++i ) {
        char char1 = s1[i];
        char char2 = s2[i];
        if(map1.find(char1)== map1.end()) { a -> c != map1.end() => ?
            map1[char1] = i;
            builder1+=i;
        }
        else {
            builder1+= char1;
        }
        
        if(map2.find(char2)== map2.end()) {
            map2[char2] = i;
            builder2+=i;
        }
        else {
            builder2+=char2;
        }
        
        if(builder1 != builder2) { a->b b1:0a b2:0b
             return false;
        }
        return true;*/
}
           
    
    
    
[1,2,2,5,10,10]
target: 2   || 1
output: 1,2 || 0,0


vector<int> searchIndex(int A[], int n, int target) {
    vector<int> result(2,-1);
    int first = binar    ySearch(A,0,n-1,target);
    if(A[first]!= target)
        return result;
    result[0] = first;
    int second = binarySearch(A,0,n-1,target + 1);
    if(A[second]==target)
        result[1] = second;
    else {
        result[1] = second-1;
    return result;
}

int binarySearch(int A[], int low, int high, int target) {
    while(low < high) {
        int mid = low + (high-low)/2;
        if(A[mid]>=target) {
            high = mid;
        }
        else {
            low = mid+1;
        }
        
     }
     return low;
   }
};
